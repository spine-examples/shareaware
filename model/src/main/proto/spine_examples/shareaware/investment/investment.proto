/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine_examples.shareaware.investment;

import "spine/options.proto";

option (type_url_prefix) = "type.shareaware.spine.io";
option java_package = "io.spine.examples.shareaware.investment";
option java_outer_classname = "InvestmentProto";
option java_multiple_files = true;

import "spine_examples/shareaware/identifiers.proto";
import "spine_examples/shareaware/share.proto";

// Represents user's investment into shares of a single type.
message Investment {
    option (entity) = {kind: AGGREGATE};

    // The ID of the investment.
    InvestmentId id = 1;

    // How many shares are available to sell.
    //
    // Does not include those which are reserved. See `shares_reserved` field.
    //
    int32 shares_available = 2 [(required) = true];

    // The reserved amount of shares per sale operation.
    //
    // Any ongoing shares sale operation would reserve the corresponding number of shares
    // within this Investment, so that they could not be spent on something else.
    // It is not possible to use the reserved shares directly for a new sale operation,
    // but rather they should be used in scope of these pending operations.
    //
    // Keys in this map corresponds to `SaleId.uuid` values.
    //
    map<string, int32> shares_reserved = 3;
}
